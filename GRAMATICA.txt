//Essa gramática é mais fácil para nós compreendermos:


BLOCO -> DECL | ATR | IF | WHILE | BLOCO’ 

BLOCO’ -> BLOCO | ɛ 

DECL -> TIPO ATR | TIPO id ; 

TIPO -> int | float | string | bool 

ATR -> id = valor ; | id = id ; | id = EXP ; 

EXP -> VALOR OPERACAO | VALOR 

VALOR -> null | bool | string | valor | id | ( EXP )

OPERACAO -> opAlgebrico EXP | opRel EXP | opLog EXP 

opAlgebrico -> + | - | * | /

opRel -> == |>= |<= |=! | < | >

opLog -> ^ | v

IF -> if ( EXP ) { BLOCO } ELSE 

ELSE -> else { BLOCO } | ɛ 

WHILE -> while ( EXP ) { BLOCO }


------------------------------------------------------
//Fatorada à esquerda:


BLOCO -> DECL | ATR | IF | WHILE | BLOCO'

BLOCO' -> BLOCO | ɛ

DECL -> T ATR | T I ;

T -> TIPO

TIPO -> int | float | string | bool

I-> id

ATR -> A num ; | A I ; | A X ;

A -> I = 

EXP -> V OPERACAO | V 

V -> VALOR

VALOR -> null | bool | string | num | I | ( X )

OPERACAO -> opAlgebrico X | opRel X | opLog X

X -> EXP  

opAlgebrico -> + | - | * | /

opRel -> == | >= | <= | =! | < | >

opLog -> ^ | v

IF -> if ( X ) { BLOCO } ELSE 

ELSE -> else { BLOCO } | ɛ

WHILE -> while ( X ) { BLOCO }


------------------------------------------------------------------------------------------------------------
//Esta será a gramática utilizada pelo código com os terminais nomeados de acordo com os lexemas corretamente:


BLOCO -> DECL | ATR | IF | WHILE | BLOCO’ 

BLOCO’ -> BLOCO | ɛ 

DECL -> TIPO ATR | TIPO id pontoVirgula 

TIPO -> mInt | mFloat | mString | bool 

ATR -> id atribuicao valor pontoVirgula | id atribuicao id pontoVirgula | id atribuicao EXP pontoVirgula 

EXP -> VALOR OPERACAO | VALOR 

VALOR -> null | bool | mString | valor | id | parenEsq EXP parenDir 

OPERACAO -> opAlgebrico EXP | opRel EXP | opLog EXP

opAlgebrico -> + | - | * | /

opRel -> == |>= |<= |=! | < | >

opLog -> ^ | v

IF -> mIf parenEsq EXP parenDir chaveEsq BLOCO chaveDir ELSE 

ELSE -> mElse chaveEsq BLOCO chaveDir | ɛ 

WHILE -> mWhile parenEsq EXP parenDir chaveEsq BLOCO chaveDir 

------------------------------------------------------
Fatorada à esquerda:


BLOCO -> DECL | ATR | IF | WHILE | BLOCO'

BLOCO' -> BLOCO | ɛ

DECL -> T ATR | T I pontoVirgula

T -> TIPO

I-> id

TIPO -> mInt | mFloat | mString | bool 

ATR -> A num pontoVirgula | A id pontoVirgula | A X pontoVirgula

A -> I atribuicao

EXP -> V OPERACAO | V 

V -> VALOR

VALOR -> null | bool | mString | valor | I | parenEsq X parenDir

OPERACAO -> opAlgebrico X | opRel X | opLog X

X -> EXP  

opAlgebrico -> + | - | * | /

opRel -> == | >= | <= | =! | < | >

opLog -> ^ | v

IF -> mIf parenEsq X parenDir chaveEsq BLOCO chaveDir ELSE 

ELSE -> mElse chaveEsq BLOCO chaveDir | ɛ 

WHILE -> while parenEsq X parenDir chaveEsq BLOCO chaveDir
